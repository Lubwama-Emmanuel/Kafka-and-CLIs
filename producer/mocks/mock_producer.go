// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Lubwama-Emmanuel/Kafka-and-CLIs/producer (interfaces: Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockProvider) Flush(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush", arg0)
}

// Flush indicates an expected call of Flush.
func (mr *MockProviderMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockProvider)(nil).Flush), arg0)
}

// KafkaMessage mocks base method.
func (m *MockProvider) KafkaMessage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KafkaMessage")
	ret0, _ := ret[0].(error)
	return ret0
}

// KafkaMessage indicates an expected call of KafkaMessage.
func (mr *MockProviderMockRecorder) KafkaMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaMessage", reflect.TypeOf((*MockProvider)(nil).KafkaMessage))
}

// Produce mocks base method.
func (m *MockProvider) Produce(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProviderMockRecorder) Produce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProvider)(nil).Produce), arg0, arg1)
}
